#!/usr/bin/env node
// Minimal Markdown -> PDF using marked + Puppeteer
// Usage: node md2pdf.js /abs/path/input.md /abs/path/output.pdf

const fs = require('fs');
const path = require('path');

async function main() {
  const [,, inPath, outPath] = process.argv;
  if (!inPath || !outPath) {
    console.error('Usage: node md2pdf.js /abs/input.md /abs/output.pdf');
    process.exit(1);
  }
  const absIn = path.resolve(inPath);
  const absOut = path.resolve(outPath);
  if (!fs.existsSync(absIn)) {
    console.error('Input not found:', absIn);
    process.exit(1);
  }

  const { marked } = require('marked');
  // GFM-style tables/code/links
  marked.setOptions({ gfm: true, breaks: false, headerIds: true, mangle: false });

  const md = fs.readFileSync(absIn, 'utf8');
  const htmlBody = marked.parse(md);

  const css = `
  * { box-sizing: border-box; }
  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif; line-height: 1.6; color: #111; }
  h1,h2,h3 { color: #0f172a; margin-top: 0; }
  h1 { font-size: 28px; margin-bottom: 8px; }
  h2 { font-size: 22px; margin-top: 24px; margin-bottom: 6px; }
  h3 { font-size: 18px; margin-top: 16px; margin-bottom: 4px; }
  p, li { font-size: 14px; }
  code, pre { background: #f6f8fa; }
  pre { padding: 10px; border-radius: 6px; overflow: auto; }
  table { border-collapse: collapse; width: 100%; }
  th, td { border: 1px solid #e5e7eb; padding: 6px 8px; font-size: 13px; }
  @page { size: A4; margin: 16mm; }
  header { font-size: 12px; color: #555; margin-bottom: 12px; }
  footer { position: fixed; bottom: 10px; width: 100%; font-size: 11px; color: #666; }
  `;

  const html = `<!doctype html><html><head><meta charset="utf-8" />
    <title>${path.basename(absIn)}</title>
    <style>${css}</style>
  </head><body>
    <header><strong>AI 幼教软件（3岁）MVP 需求分析</strong></header>
    ${htmlBody}
    <footer>Generated by md2pdf · ${new Date().toISOString()}</footer>
  </body></html>`;

  const puppeteer = require('puppeteer');
  const browser = await puppeteer.launch({ args: ['--no-sandbox','--disable-setuid-sandbox'] });
  try {
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'load' });
    await page.pdf({ path: absOut, format: 'A4', printBackground: true, margin: { top: '15mm', right: '15mm', bottom: '18mm', left: '15mm' } });
    console.log('PDF_OK', absOut);
  } finally {
    await browser.close();
  }
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});

